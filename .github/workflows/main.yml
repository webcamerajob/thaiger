name: Parse & Post Articles
concurrency:
  group: post-articles
  cancel-in-progress: false
  
permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22-23 * * *'
    - cron: '30 0-11 * * *'
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 15

jobs:
  build-and-publish:
    name: Parse and Publish
    runs-on: ubuntu-latest
    
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi
          if [ -f requirements-poster.txt ]; then
            pip install -r requirements-poster.txt
          fi

      - name: Run parser
        id: parse_step
        run: |
          echo "→ STARTING PARSER RUN"
          # Убедитесь, что имя файла (например, parser.py) верное
          python3 parser.py \
            --lang 'ru' \
            --limit ${{ env.BATCH_LIMIT_PARSE || 15 }} \
            --posted-state-file articles/posted.json | tee parser_output.txt
          echo "→ PARSER RUN COMPLETE"
          
          # Извлекаем статус для следующего шага
          NEW_ARTICLES_STATUS=$(grep "NEW_ARTICLES_STATUS:" parser_output.txt | cut -d: -f2 | tr -d '[:space:]')
          echo "new_articles_found=$NEW_ARTICLES_STATUS" >> $GITHUB_OUTPUT
          echo "Extracted new_articles_found status: '$NEW_ARTICLES_STATUS'"

      - name: Run poster
        if: steps.parse_step.outputs.new_articles_found == 'true'
        run: |
          echo "→ Running poster..."
          # Постер работает с папкой articles, которую создал парсер на предыдущем шаге
          python3 poster.py \
            --parsed-dir articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Commit updated data files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Добавляем файлы для коммита, только если они существуют
          if [ -f "articles/posted.json" ]; then
            git add articles/posted.json
          fi
          if [ -f "articles/catalog.json" ]; then
            git add articles/catalog.json
          fi

          if ! git diff --cached --quiet; then
            git commit -m "chore: update data files"
            git pull --rebase origin main
            git push
          else
            echo "✅ Data files unchanged"
          fi
